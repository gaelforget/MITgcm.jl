var documenterSearchIndex = {"docs":
[{"location":"functionalities/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"MITgcm.jl allows the analysis of MITgcm results in Julia. It can also setup, build, and launch a chosen model configuration (MITgcm_config) from within julia. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Functionalities are documented in the coming sections, and in Examples, Notebooks.","category":"page"},{"location":"functionalities/#Getting-Started","page":"Overview","title":"Getting Started","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Installing the latest version of MITgcm.jl with the built-in package manager is the recommended method. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"using Pkg\nPkg.add(\"MITgcm\")","category":"page"},{"location":"functionalities/#Running-MITgcm","page":"Overview","title":"Running MITgcm","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Let's start running MITgcm interactively. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The first command defines a data structure, MITgcm_config, that we can then use from Julia. The setup command, by default, creates a folder in your tempdir() to run MITgcm.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"using MITgcm\nMC=MITgcm_config(configuration=\"tutorial_held_suarez_cs\")\nsetup(MC)\nexe=joinpath(MITgcm.default_path(),\"verification\",MC.configuration,\"build\",\"mitgcmuv\") #hide\nshow(MC)","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"After setup, the standard workflow is to call build and then MITgcm_launch. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Next we can use the log method to get a status report. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"build(MC)\nlaunch(MC)\nlog(MC)","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"If we have a previous build of MITgcm for this then we can specify the file path as a parameter, :exe. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"If :exe is not specified, or if no file is found at the specified path, build will attempt to build the model for us.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"exe=joinpath(default_path(),\"verification\",MC.configuration,\"build\",\"mitgcmuv\")\nMC.inputs[:setup][:build][:exe]=exe","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"tip: Tip\nFor longer MITgcm simulations run, users often prefer to use a queuing system or batch script (not an interactive session).\nsetup can generate and submit a batch script, via create_script and config.inputs[:setup][:main][:command] = \"qsub submit.csh\"","category":"page"},{"location":"functionalities/#Using-Model-Output","page":"Overview","title":"Using Model Output","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"As MITgcm users, we often want to read and visualise model output from an earlier model run. To this end, MITgcm.jl provides methods to read the various file formats that MITgcm generates.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Read example:","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"T=read_mdsio(joinpath(MC,\"run\"),\"T.0000276496\")\nsize(T)","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Plot example:","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"using CairoMakie\n\nfig, ax, hm = heatmap(T[1:32,:,1])\nax.title=\"temperature\"\nColorbar(fig[1, 2], hm)\n\nfig","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"tip: Tip\nFor more use cases, see Climatology.jl , MeshArrays.jl, IndividualDisplacements.jl.climatology notebook shows a whole set of ocean variables, transports, etc computed from global MITgcm solutions (ECCO4 and OCCA2)\ngeography notebook and vector tutorial present generic recipes, readily applicable to most MITgcm configurations\nocean pathways can also be computed from MITgcm output","category":"page"},{"location":"functionalities/#Main-Features","page":"Overview","title":"Main Features","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"MITgcm File Formats\nMITgcm Configurations","category":"page"},{"location":"functionalities/#MITgcm-File-Formats","page":"Overview","title":"MITgcm File Formats","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"MITgcm stores model output within a run/ folder, such as the standard STDOUT text files, and other file formats listed below. scan_rundir can be used to provide a summary of what's in the run/ folder. For more see:","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Standard Output (text)\nInput Files (text)\nMDS Files (binary output)\nMNC Files (netcdf output)\nGrid Files (binary or netcdf)\nOther Files","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Grid variables are often needed for analysis. They can be read from file using either GridLoad_mdsio or GridLoad_mnc. This will return Γ.XC, Γ.YC, etc formated using MeshArrays.jl. See also GridLoad_native.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"note: Note\nThe MITgcm_scan_output.jl notebook does this in bulk for all configurations in MITgcm/verification and displays the gridded model domain for each model configuration (this page).","category":"page"},{"location":"functionalities/#MITgcm-Configurations","page":"Overview","title":"MITgcm Configurations","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"MITgcm.jl represents a model configuration using MITgcm_config. This data structure allows you take advantage of the ClimateModels.jl interface for example. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"setup prepares a run directory for the MITgcm_config\nbuild compiles the model (if needed)\nMITgcm_launch starts the model run","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The verification_experiments function provides a list of standard model configurations. Each one has a subfolder in joinpath(default_path(),\"verification\") where the model often gets compiled. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"note: Note\nFor more on these aspects, see Examples, Model Configurations, and ClimateModels Interface.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Interactive notebooks can be found in the Examples section (and the examples/ subfolder). They demonstrate functionalities like plotting with Makie.jl and particle tracking with  IndividualDisplacements.jl.","category":"page"},{"location":"functionalities/#Troubleshooting","page":"Overview","title":"Troubleshooting","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The system_check method will try running MITgcm and report back. If the result is negative for any particular item, you may want to consult the MITgcm documentation for more guidance.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"using MITgcm\nMITgcm.system_check(setenv=true)","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The set_environment_variables_to_default() method can be used to set NETCDF_ROOT and MPI_INC_DIR to default values.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The scan_rundir method can be used to inspect the run directory of an experiment.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"tip: Tip\nBuilding and running MITgcm requires a fortran compiler. Some configurations further require installing MPI and NetCDF libraries.\nThe ECCO-Docker image has MITgcm.jl pre-installed, as well as gfortran, MPI, and NetCDF allowing to run any MITgcm configuration. The ECCO-Binder instance (free, but small) is available to try functionalities in the cloud.","category":"page"},{"location":"functionalities_more/#Additional-Functionalities","page":"Additional Functionalities","title":"Additional Functionalities","text":"","category":"section"},{"location":"functionalities_more/#Related-packages","page":"Additional Functionalities","title":"Related packages","text":"","category":"section"},{"location":"functionalities_more/","page":"Additional Functionalities","title":"Additional Functionalities","text":"ClimateModels.jl : standard interface for modeling workflows. \nOceanStateEstimation.jl : accessing and using ECCO solutions. \nMeshArrays.jl : data structures for gridded model output.\nIndividualDisplacements.jl : particle tracking applications and pathway simulations. ","category":"page"},{"location":"functionalities_more/#More-Examples","page":"Additional Functionalities","title":"More Examples","text":"","category":"section"},{"location":"functionalities_more/","page":"Additional Functionalities","title":"Additional Functionalities","text":"The notebook from JuliaCon2021 (MITgcm_tutorial_global_oce_biogeo.jl) reads and visualize results from the standard MITgcm configuration called tutorial_global_oce_biogeo.","category":"page"},{"location":"functionalities_more/","page":"Additional Functionalities","title":"Additional Functionalities","text":"note: Note\nThis notebook builds and runs tutorial_global_oce_biogeo from within Julia. Alternatively, the MITgcm documentation explains how to build and run tutorials at the command line in linux. ","category":"page"},{"location":"functionalities_more/#Format-Conversions","page":"Additional Functionalities","title":"Format Conversions","text":"","category":"section"},{"location":"functionalities_more/","page":"Additional Functionalities","title":"Additional Functionalities","text":"findtiles\ncube2compact\ncompact2cube\nconvert2array\nconvert2gcmfaces","category":"page"},{"location":"functionalities_more/#MITgcm.findtiles","page":"Additional Functionalities","title":"MITgcm.findtiles","text":"findtiles(ni::Int,nj::Int,mygrid::gcmgrid)\nfindtiles(ni::Int,nj::Int,grid::String=\"LatLonCap\",GridParentDir=\"../inputs/GRID_LLC90/\")\n\nReturn a MeshArray map of tile indices, mytiles[\"tileNo\"], for tile size ni,nj and extract grid variables accordingly.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.cube2compact","page":"Additional Functionalities","title":"MITgcm.cube2compact","text":"cube2compact(x::Array)\n\nReshape from e.g. size (192, 32, 5) in cube format to (32, 192, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.compact2cube","page":"Additional Functionalities","title":"MITgcm.compact2cube","text":"compact2cube(x::Array)\n\nReshape from e.g. size (32, 192, 5) in cube format to (192, 32, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.convert2array","page":"Additional Functionalities","title":"MITgcm.convert2array","text":"convert2array(fld::MeshArray)\n\nConvert MeshArray to Array (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.convert2gcmfaces","page":"Additional Functionalities","title":"MITgcm.convert2gcmfaces","text":"convert2gcmfaces(fld::MeshArray)\n\nConvert mitgcm output to MeshArray (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#Formulas,-Parameters","page":"Additional Functionalities","title":"Formulas, Parameters","text":"","category":"section"},{"location":"functionalities_more/","page":"Additional Functionalities","title":"Additional Functionalities","text":"SeaWaterDensity\nMixedLayerDepth","category":"page"},{"location":"functionalities_more/#MITgcm.SeaWaterDensity","page":"Additional Functionalities","title":"MITgcm.SeaWaterDensity","text":"SeaWaterDensity(Θ,Σ,Π,Π0)\n\nCompute potential density (ρP), in situ density (ρI), and density referenced to PREF (Π0 in decibars) from potential temperature (Θ in °C), salinity (Σ in psu) and pressure (Π in decibars) according to the UNESCO / Jackett & McDougall 1994 equation of state.\n\nCredits: code based on a Matlab implementation by B. Ferron Reference: https://www.jodc.go.jp/info/iocdoc/UNESCOtech/059832eb.pdf Check value: ρI = 1041.83267kg/m^3 for Θ=3°Celcius, Σ=35psu, Π=3000dbar\n\n(ρP,ρI,ρR) = SeaWaterDensity(3.,35.5,3000.)\nisapprox(ρI,1041.83267, rtol=1e-6)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.MixedLayerDepth","page":"Additional Functionalities","title":"MITgcm.MixedLayerDepth","text":"MixedLayerDepth(Θ,Σ,Δ,mthd)\n\nCompute mixed layer depth from potential temperature (Θ in °C), salinity (Σ in psu) and depth (Δ in method) according to various formulas (mthd == \"BM\", \"Suga\", \"Kara\"). Inputs must be dense vectors without any missing value (or NaN, etc).\n\nD=collect(0.0:1.0:500.0); tmp=(1.0.-tanh.(5*(-1 .+ 2/D[end]*D)));\nT=2.0 .+ 8.0*tmp; S=34.0 .+ 0.5*tmp;\n(ρP,ρI,ρR) = SeaWaterDensity(T,S,D);\n\nmld=MixedLayerDepth(T,S,D,\"BM\"); isapprox(mld,134.0)\n\nusing Plots\nplot(ρP,-D,w=2,label=\"Potential Density\",ylabel=\"Depth\")\nplot!(vec([ρP[1] ρP[end]]),-fill(mld,2),label=\"Mixed Layer Depth\",w=2,c=\"black\",s=:dash)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm-File-Formats","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"The two main output formats of MITgcm gridded fields are called MDS and MNC. In addition, the standard output file is a text file that records events during the model run, including its successful completion.","category":"page"},{"location":"functionalities_read/#Standard-Output","page":"MITgcm File Formats","title":"Standard Output","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"The standard output file can be scanned to collect information about the model run. ","category":"page"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"monitor\nscan_rundir\nscan_stdout\nread_available_diagnostics","category":"page"},{"location":"functionalities_read/#MITgcm.monitor","page":"MITgcm File Formats","title":"MITgcm.monitor","text":"function monitor(config::MITgcm_config)\n\nCall scan_rundir and show to REPL. \n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.scan_rundir","page":"MITgcm File Formats","title":"MITgcm.scan_rundir","text":"scan_rundir(pth::String)\n\nScan a MITgcm run directory and then, if found, the standard output text file (\"output.txt\" or \"STDOUT.0000\") via scan_stdout.\n\n\n\n\n\nscan_rundir(config::MITgcm_config)\n\nScan a MITgcm run directory (joinpath(MC,\"run\")) and then, if found, the standard output text file (\"output.txt\" or \"STDOUT.0000\") via scan_stdout.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.scan_stdout","page":"MITgcm File Formats","title":"MITgcm.scan_stdout","text":"scan_stdout(filout::String)\n\nScan a MITgcm standard output text file (\"output.txt\" or \"STDOUT.0000\") and return a NamedTuple of information collected.\n\npackages : report of packages being compiled and used\nparams_time : initial time, model duation, output frequency, etc\nparams_grid : type of grid (Curvilinear, Cartesian, ...) and array sizes\nparamsfiles : type of output (usemdsio, use_mnc) and array size (ioSize)\ncompleted : true / false depending on the end of standard output file (filout)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_available_diagnostics","page":"MITgcm File Formats","title":"MITgcm.read_available_diagnostics","text":"read_available_diagnostics(fldname::String; filename=\"available_diagnostics.log\")\n\nGet the information for a particular variable fldname from the available_diagnostics.log text file generated by MITgcm.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#Input-Files","page":"MITgcm File Formats","title":"Input Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"Run-time parameters to MITgcm are provided via text files. This package can read and write them in two formats (standard TOML format, or the native MITgcm_namelist format).","category":"page"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"Other inputs (binary or NetCDF files) for gridded data, forcing fields, etc can be provided via an input_folder or downloaded as shown in the setup_ECCO4!.","category":"page"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_toml\nMITgcm_namelist\nread_namelist\nwrite_namelist\nread_all_namelists\nwrite_all_namelists","category":"page"},{"location":"functionalities_read/#MITgcm.read_toml","page":"MITgcm File Formats","title":"MITgcm.read_toml","text":"read_toml(toml_file::String)\n\nRead toml parameter file into an OrderedDict with Symbol keys, consistent with tracked_parameters.toml.\n\nusing MITgcm, TOML\npth=joinpath(dirname(pathof(MITgcm)),\"..\",\"examples\",\"configurations\")\ntoml_file=joinpath(pth,\"tutorial_held_suarez_cs.toml\")\nparams=read_toml(toml_file)\n\nWriting parameters to file is straightforward. For example:\n\nMC=MITgcm_config(configuration=\"tutorial_held_suarez_cs\")\nsetup(MC)\nopen(tempname()*\".toml\", \"w\") do io\n    TOML.print(io, MC.inputs)\nend\n\n\n\n\n\nread_toml(config_name::Symbol)\n\nRead toml parameter file specified by configuration name.\n\nusing MITgcm\nparams=read_toml(:OCCA2)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.MITgcm_namelist","page":"MITgcm File Formats","title":"MITgcm.MITgcm_namelist","text":"MITgcm_namelist(groups,params)\n\nData structure representing a MITgcm namelist file, such as data.pkg, which contains \n\n    groups :: Array{Symbol,1} = Array{Symbol,1}(undef, 0)\n    params :: Array{OrderedDict{Symbol,Any},1} = Array{OrderedDict{Symbol,Any},1}(undef, 0)\n\nwith model parameters (params) being organized in groups as done in the files.\n\nusing MITgcm\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nMITgcm_namelist(nml.groups,nml.params)\nMITgcm_namelist(groups=nml.groups,params=nml.params)\nMITgcm_namelist(groups=nml.groups)\n\n\n\n\n\n","category":"type"},{"location":"functionalities_read/#MITgcm.read_namelist","page":"MITgcm File Formats","title":"MITgcm.read_namelist","text":"read_namelist(fil)\n\nRead a MITgcm namelist file in native format, parse it, and return as a NamedTuple.\n\nusing MITgcm\ntestreport(MITgcm_config(configuration=\"advect_xy\"))\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnamelist=read_namelist(fil)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.write_namelist","page":"MITgcm File Formats","title":"MITgcm.write_namelist","text":"write_namelist(fil)\n\nSave a MITgcm namelist file (native format). In the example below, one is read from file, modified, and then saved to a new file using write_namelist.\n\nusing MITgcm\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read(fil,MITgcm_namelist())\nwrite(fil*\"_new\",nml)\n\nor write_namelist(fil*\"_new\",namelist).\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_all_namelists","page":"MITgcm File Formats","title":"MITgcm.read_all_namelists","text":"read_all_namelists(input_path)\n\nRead all MITgcm namelist files in input_path, parse them, and return as a NamedTuple of NamedTuples.\n\nusing MITgcm; path0=default_path()\ninput_path=joinpath(path0,\"verification\",\"advect_xy\",\"input\")\nparams=read_all_namelists(input_path)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.write_all_namelists","page":"MITgcm File Formats","title":"MITgcm.write_all_namelists","text":"write_all_namelists(params,output_path=tempname())\n\nWrite all MITgcm namelist to files in output_path, from corresponding toml file\n\nusing MITgcm\nparams=read_toml(:OCCA2)\nwrite_all_namelists(params)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MDS-Files","page":"MITgcm File Formats","title":"MDS Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_mdsio\nread_meta","category":"page"},{"location":"functionalities_read/#MITgcm.read_mdsio","page":"MITgcm File Formats","title":"MITgcm.read_mdsio","text":"read_mdsio(fil::String)\n\nRead a single MITgcm MDSIO-type file (\".data\" binary + \".meta\" text pair), and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p*\"surfDiag.0000000020.002.001.data\")\ny=read_mdsio(p*\"pickup.ckptA.002.001.data\")\nz=read_mdsio(p*\"T.0000000000.002.001.data\")\n\n\n\n\n\nread_mdsio(fil::String,rec::Integer)\n\nRead a single variable / record from a single MITgcm MDSIO-type file, and return as an Array.\n\nread_mdsio(fil,1)\n\n\n\n\n\nread_mdsio(fil::String,nam::Symbol)\n\nRead a single variable / record from a single MITgcm MDSIO-type file, and return as an Array.\n\nread_mdsio(fil,:THETA)\n\n\n\n\n\nread_mdsio(pth::String,fil::String)\n\nRead a set of MITgcm MDSIO-type files (\".data\" binary + \".meta\" text pair), combine, and return as an Array. Unlike read_mdsio(fil::String) where fil is one complete file name, this method will search within pth for files that start with fil.\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p,\"surfDiag.0000000020\")\ny=read_mdsio(p,\"pickup.ckptA\")\nz=read_mdsio(p,\"T.0000000000\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_meta","page":"MITgcm File Formats","title":"MITgcm.read_meta","text":"read_meta(metafile)\n\nRead a MITgcm metadata file, parse it, and return as a NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p*\"surfDiag.0000000020.002.001.meta\")\npairs(meta)\nmeta.dimList\n\n\n\n\n\nread_meta(pth::String,fil::String)\n\nRead a MITgcm metadata files, parse them, and return as an array of NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p,\"surfDiag.0000000020\")\npairs(meta[end])\n[meta[i].dimList for i in 1:length(meta)]\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MNC-Files","page":"MITgcm File Formats","title":"MNC Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_mnc","category":"page"},{"location":"functionalities_read/#MITgcm.read_mnc","page":"MITgcm File Formats","title":"MITgcm.read_mnc","text":"read_mnc(pth::String,fil::String,var::String)\n\nRead variable var from a set of MITgcm MNC-type files (netcdf files), combine, and return as an Array. This method will search within pth for files that start with fil.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#Grid-Files","page":"MITgcm File Formats","title":"Grid Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"GridLoad_mdsio\nGridLoad_mnc\nGridLoad_native","category":"page"},{"location":"functionalities_read/#MITgcm.GridLoad_mdsio","page":"MITgcm File Formats","title":"MITgcm.GridLoad_mdsio","text":"GridLoad_mdsio(myexp::MITgcm_config)\n\nLoad grid variables (XC, YC, Depth, etc) from model run directory (rundir).\n\n\n\n\n\nGridLoad_mdsio(rundir::String)\n\nLoad grid variables (XC, YC, Depth, etc) from model run directory (rundir).\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.GridLoad_mnc","page":"MITgcm File Formats","title":"MITgcm.GridLoad_mnc","text":"GridLoad_mnc(γ::gcmgrid)\n\nLoad grid variabes (XC, YC, Depth) model run directory (joinpath(rundir,\"mnc_test_0001\")).\n\n\n\n\n\nGridLoad_mnc(myexp::MITgcm_config)\n\nLoad grid variables (XC, YC, Depth) from model run directory (joinpath(rundir,\"mnc_test_0001\")).\n\n\n\n\n\nGridLoad_mnc(rundir::String)\n\nLoad grid variables (XC, YC, Depth) from model run directory (joinpath(rundir,\"mnc_test_0001\")).\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.ReadNativeGridFiles.GridLoad_native","page":"MITgcm File Formats","title":"MITgcm.ReadNativeGridFiles.GridLoad_native","text":"GridLoad_native(path,files,γ)\n\nLoad grid variables from native grid files.\n\npath=\"GRID_LLC90\"\nfiles=[\"tile001.mitgrid\",\"tile002.mitgrid\",\"tile003.mitgrid\",\"tile004.mitgrid\",\"tile005.mitgrid\"]\nioSize=[90 1170]\nfacesSize=[(90, 270), (90, 270), (90, 90), (270, 90), (270, 90)]\n\nγ=gcmgrid(path,\"LatLonCap\",5,facesSize, ioSize, Float64, read, write)\n\nΓ=GridLoad_native(path,files,γ)\n\nor using another grid\n\npath=\"llc_1080\"\nfiles=[ \"llc_001_1080_3240.bin\",\"llc_002_1080_3240.bin\",\n        \"llc_003_1080_1080.bin\",\"llc_004_3240_1080.bin\",\"llc_005_3240_1080.bin\"]\nioSize=[1080 14040]\nfacesSize=[(1080, 3240), (1080, 3240), (1080, 1080), (3240, 1080), (3240, 1080)]\n\nand for plotting \n\nusing GLMakie\n\n#col=log10.(Γ.RAC); rng=(4,8)\n\n#using MAT\n#Depth=get_bathy(path,γ)\n#col=write(Depth); rng=(-5000,5000)\n\nXC=write(Γ.XC); YC=write(Γ.YC)\nii=findall((XC.>-80).&(XC.<-10).&(YC.>-10).&(YC.<60))\n#ii=findall((XC.>-80).&(XC.<-60).&(YC.>15).&(YC.<35))\n\n#ii=1:prod(γ.ioSize)\n\nscatter(XC[ii],YC[ii],color=col[ii],colorrange=rng,markersize=0.1, markerspace = :data)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#Other-Output-Files","page":"MITgcm File Formats","title":"Other Output Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_flt\nread_bin\nread_nctiles","category":"page"},{"location":"functionalities_read/#MITgcm.read_flt","page":"MITgcm File Formats","title":"MITgcm.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_bin","page":"MITgcm File Formats","title":"MITgcm.read_bin","text":"read_bin(fil::String,kt::Union{Int,Missing},kk::Union{Int,Missing},prec::DataType,mygrid::gcmgrid)\n\nRead model output from binary file and convert to MeshArray. Other methods:\n\nread_bin(fil::String,prec::DataType,mygrid::gcmgrid)\nread_bin(fil::String,mygrid::gcmgrid)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_nctiles","page":"MITgcm File Formats","title":"MITgcm.read_nctiles","text":"read_nctiles(fileName,fldName,mygrid; I, eccoVersion4Release4=false, verbose=false)\n\nRead model output from NCTiles file and convert to MeshArray instance. Setting the keyword argument eccoVersion4Release4=true allows read_nctiles to read in ECCOv4r4 data which has a different file naming convention to previous versions.\n\nmygrid=GridSpec(\"LatLonCap\")\nfileName=\"nctiles_grid/GRID\"\nDepth=read_nctiles(fileName,\"Depth\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid,I=(:,:,1))\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#Model-Configurations","page":"Model Configurations","title":"Model Configurations","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"In MITgcm.jl, a model configuration is represented as a MITgcm_config. Model parameters are handled as ordered dictionaries and stored as TOML files. Standard model configurations are readily supported.","category":"page"},{"location":"functionalities_configurations/#MITgcm_config","page":"Model Configurations","title":"MITgcm_config","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"The data structure that enables MITgcm.jl is called MITgcm_config.","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"MITgcm_config","category":"page"},{"location":"functionalities_configurations/#MITgcm.MITgcm_config","page":"Model Configurations","title":"MITgcm.MITgcm_config","text":"MITgcm_config()\n\nConcrete type of AbstractModelConfig for MITgcm (as part of the ClimateModels.jl interface for MITgcm) which contains\n\n    model :: String = \"MITgcm\"\n    configuration :: String = \"\"\n    inputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    outputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    channel :: Channel{Any} = Channel{Any}(10) \n    folder :: String = tempdir()\n    ID :: UUID = UUIDs.uuid4()\n\nand can be constructed using keywords as follows\n\nunknown_config=MITgcm_config(configuration=\"unknown\")\n\n\n\n\n\n","category":"type"},{"location":"functionalities_configurations/#Model-Parameters","page":"Model Configurations","title":"Model Parameters","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"Model parameters can be stored as a TOML file, and represented as a nested OrderedDic.","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"using MITgcm # hide\np0=dirname(pathof(MITgcm)) # hide\nfil=joinpath(p0,\"..\",\"examples\",\"configurations\",\"OCCA2.toml\") # hide\nread_toml(fil)","category":"page"},{"location":"functionalities_configurations/#Global-ECCO-Configuration","page":"Model Configurations","title":"Global ECCO Configuration","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"Global ocean model configurations used in NASA's ECCO ocean state estimation program.","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"ECCO4 : Forget et al., 2015 (doi:10.5194/gmd-8-3071-2015)\nOCCA2 : Forget, 2024 (under review).","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"warning: Warning\nRunning these solutions requires at least 16 cores (preferably 96) and downloading forcing fields (96G at least). To try with a smaller model solution, see Verification Experiments.","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"setup_ECCO4!\nECCO4_inputs.download_input_folder\nECCO4_inputs.get_files\nECCO4_inputs.get_list\nECCO4_testreport.compute\nECCO4_testreport.compare","category":"page"},{"location":"functionalities_configurations/#MITgcm.setup_ECCO4!","page":"Model Configurations","title":"MITgcm.setup_ECCO4!","text":"setup_ECCO4!(config::MITgcm_config)\n\nSetup method for ECCO4 and OCCA2 solutions.\n\nusing MITgcm\n\nparams=read_toml(:ECCO4)\nfolder=joinpath(pwd(),\"tmp1\")\n\nMC=MITgcm_config(inputs=params,folder=folder)\n\n#providing executable (optional)\n#push!(MC.inputs[:setup][:main],(:exe => joinpath(pwd(),\"mitgcmuv\")))\n\n#providing input folder (optional)\n#push!(MC.inputs[:setup][:main],(:input_folder => joinpath(pwd(),\"input_folder\")))\n\n#modifying run time options (optional)\n#MC.inputs[:pkg][:PACKAGES][:useECCO]=false\n\nsetup(MC)\n\n#modifying build options (optional)\n#MC.inputs[:setup][:build][:options]=MITgcm.build_options_pleiades\n\nbuild(MC)\n\nlaunch(MC)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.ECCO4_inputs.download_input_folder","page":"Model Configurations","title":"MITgcm.ECCO4_inputs.download_input_folder","text":"download_input_folder(config::MITgcm_config)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.ECCO4_inputs.get_files","page":"Model Configurations","title":"MITgcm.ECCO4_inputs.get_files","text":"get_files(list1::DataFrame,nam1::String,path1::String)\n\nCreate a list of Dataverse files from folder with specified name.\n\nlist1=ECCO4_inputs.get_list()\nnam1=\"model initialization\"\nECCO4_inputs.get_files(list1,nam1,tempname())\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.ECCO4_inputs.get_list","page":"Model Configurations","title":"MITgcm.ECCO4_inputs.get_list","text":"get_list(; write_file=false)\n\nCreate a list of Dataverse folders for ECCOv4r2. If write_file=true then write to file joinpath(tempdir(),\"Dataverse_list.csv\")/\n\n\n\n\n\nget_list(list1::DataFrame,name::String)\n\nCreate a list of Dataverse files from folder with specified name.\n\nlist1=ECCO4_inputs.get_list()\nnam1=\"surface forcing fields\"\nlist2=ECCO4_inputs.get_list(list1,nam1)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.ECCO4_testreport.compute","page":"Model Configurations","title":"MITgcm.ECCO4_testreport.compute","text":"compute(pth0)\n\n@everywhere begin\n using MITgcm\n using ECCO4_testreport.SharedArrays\nend\n\nreport=ECCO4_testreport.compute(\"run\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.ECCO4_testreport.compare","page":"Model Configurations","title":"MITgcm.ECCO4_testreport.compare","text":"compare(A::DataFrame,B::DataFrame)\n\nusing ClimateModels.DataFrames, ClimateModels.CSV\nref_file=\"test/testreport_baseline2.csv\"\nref=CSV.read(ref_file,DataFrame)\n\nusing MITgcm\nECCO4_testreport.compare(report,ref)\n\n\n\n\n\ncompare(A::DataFrame,B::DataFrame,v::AbstractString)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#Verification-Experiments","page":"Model Configurations","title":"Verification Experiments","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"The MITgcm/verification sub-folder of the MITgcm source code provides a suite of small model configurations, often used by model developers for testing. ","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"To list of these model configurations (as installed) is provided by verification_experiments. ","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"using MITgcm # hide\nves=verification_experiments()\n[ve.configuration for ve in ves]","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"They can be used via a MITgcm_config as follows.","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"MITgcm_config(configuration=\"MLAdjust\")","category":"page"},{"location":"functionalities_configurations/#Functionalities","page":"Model Configurations","title":"Functionalities","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"verification_experiments\nsetup_verification!\ntestreport","category":"page"},{"location":"functionalities_configurations/#MITgcm.verification_experiments","page":"Model Configurations","title":"MITgcm.verification_experiments","text":"verification_experiments()\n\nGet list of all most-standard configurations of MITgcm and return as an Array of MITgcm_config\n\nexps=verification_experiments()\n\n\n\n\n\nverification_experiments(nam::String)\n\nGet one configurations of MITgcm and return as a MITgcm_config\n\nadvect_xy=verification_experiments(\"advect_xy\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.setup_verification!","page":"Model Configurations","title":"MITgcm.setup_verification!","text":"setup_verification!(config::MITgcm_config)\n\nSetup method for verification experiments.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.testreport","page":"Model Configurations","title":"MITgcm.testreport","text":"testreport(config::MITgcm_config,ext=\"\")\n\nRun the testreport script for one model config, with additional options (optional) speficied in ext\n\nusing MITgcm\ntestreport(MITgcm_config(configuration=\"front_relax\"),\"-norun\")\n#testreport(MITgcm_config(configuration=\"all\"),\"-norun\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#Interface-to-MITgcm","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"","category":"section"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"The ClimateModels.jl's interface is implemented in MITgcm.jl. ","category":"page"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"This allows you to easily create model simulations using MITgcm conveniently from Julia.","category":"page"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"using MITgcm\nMC=MITgcm_config(configuration=\"advect_xy\")\nsetup(MC)\nexe=joinpath(MITgcm_path[2],MC.configuration,\"build\",\"mitgcmuv\") #hide\nMC.inputs[:setup][:build][:exe]=exe #hide\nbuild(MC)\nlaunch(MC)","category":"page"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"sc=scan_rundir(MC)\nkeys(sc)","category":"page"},{"location":"functionalities_interface/#Functionalities","page":"Interface to MITgcm","title":"Functionalities","text":"","category":"section"},{"location":"functionalities_interface/#Main","page":"Interface to MITgcm","title":"Main","text":"","category":"section"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"note: Note\nThe following three methods implement the ClimateModels.jl's interface for MITgcm.","category":"page"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"setup\nbuild\nlaunch","category":"page"},{"location":"functionalities_interface/#ClimateModels.setup","page":"Interface to MITgcm","title":"ClimateModels.setup","text":"setup(config::MITgcm_config)\n\nCreate a run/ folder and link everything there as needed to be ready to run model as  normally done for most-standard MITgcm configurations (incl. prepare_run and mitgcmuv). Call ClimateModels.git_log_init(config) to setup git tracker and  put!(config.channel,MITgcm_launch) to be executed via launch(config) later.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#ClimateModels.build","page":"Interface to MITgcm","title":"ClimateModels.build","text":"build(config::MITgcm_config)\n\nBuild the model using genmake2, make depend, and make. The first two link all  code files, headers, etc  in the build/ folder before compiling the model.\n\nNote : this is skipped if config.inputs[:setup][:main][:exe] is specified.\n\n\n\n\n\nbuild(config::MITgcm_config,options::String)\n\nBuild the model using genmake2, make depend, and make unless otherwise specified via options. The genmake2 and make depend commands link all  code files, headers, etc  in the build/ folder before make compiles the model.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#ClimateModels.launch","page":"Interface to MITgcm","title":"ClimateModels.launch","text":"launch(config::MITgcm_config)\n\nGo to run/ folder and effectively call mitgcmuv > output.txt\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#Tools","page":"Interface to MITgcm","title":"Tools","text":"","category":"section"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"system_check\nset_environment_variables_to_default\ndefault_path\nMITgcm.getdata\ncreate_script\nparse_param","category":"page"},{"location":"functionalities_interface/#MITgcm.system_check","page":"Interface to MITgcm","title":"MITgcm.system_check","text":"system_check(;setenv=false,rebuild=true)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#MITgcm.set_environment_variables_to_default","page":"Interface to MITgcm","title":"MITgcm.set_environment_variables_to_default","text":"set_environment_variables_to_default()\n\nDefines environment variables to default values.\n\n!!! Warning : it is generally much better to adjust them to your own system !!!\n\n!!! Warning : the defaults will likely NOT work on most systems !!!\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#MITgcm.default_path","page":"Interface to MITgcm","title":"MITgcm.default_path","text":"MITgcm.default_path()\n\nReturn default path, and download via MITgcm_download if needed.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#MITgcm.getdata","page":"Interface to MITgcm","title":"MITgcm.getdata","text":"getdata(nam::String)\n\nAdd data to the scratch space folder. Known options for nam include  \"mitgcmsmall\", \"mitgcmsmallverif\", \"hs94pickup\", \"darwin3code\", \"darwin3oneD\"\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#MITgcm.create_script","page":"Interface to MITgcm","title":"MITgcm.create_script","text":"create_script(rundir=pwd(),filename=\"\")\n\nCreate submission script – for NASA pleiades in this example.\n\nsubmission_script=MITgcm.create_script(pwd(),\"job.csh\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#MITgcm.parse_param","page":"Interface to MITgcm","title":"MITgcm.parse_param","text":"parse_param(p1)\n\nParse namelist parameter and return in corresponding type\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"note: Note\nThe following methods are imported from ClimateModels.jland customized for MITgcm.","category":"page"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"compile\nclean","category":"page"},{"location":"functionalities_interface/#ClimateModels.compile","page":"Interface to MITgcm","title":"ClimateModels.compile","text":"compile(config::MITgcm_config)\n\nCompile the model using make in build/ that has already been setup.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#ClimateModels.clean","page":"Interface to MITgcm","title":"ClimateModels.clean","text":"clean(config::MITgcm_config)\n\nCancel any remaining task (config.channel) and clean up the run directory (via rm).\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/","page":"Interface to MITgcm","title":"Interface to MITgcm","text":"│","category":"page"},{"location":"contributing/#Contributors-Guide","page":"Contribute","title":"Contributors Guide","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Thank you for considering contributing to MITgcm.jl! If you're interested in contributing we want your help no matter how big or small a contribution you make! ","category":"page"},{"location":"contributing/#Table-of-Contents","page":"Contribute","title":"Table of Contents","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"How to Contribute\nReporting Bugs\nSuggesting Enhancements\nCode Contribution\nPull Request Process\nLicense","category":"page"},{"location":"contributing/#How-to-Contribute","page":"Contribute","title":"How to Contribute","text":"","category":"section"},{"location":"contributing/#Reporting-Bugs","page":"Contribute","title":"Reporting Bugs","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you encounter a bug, please help us fix it by following these steps:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Ensure the bug is not already reported by checking the issue tracker.\nIf the bug isn't reported, open a new issue. Clearly describe the issue, including steps to reproduce it.","category":"page"},{"location":"contributing/#Suggesting-Enhancements","page":"Contribute","title":"Suggesting Enhancements","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you have ideas for enhancements, new features, or improvements, we'd love to hear them! Follow these steps:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Check the issue tracker to see if your suggestion has been discussed.\nIf not, open a new issue, providing a detailed description of your suggestion and the use case it addresses.","category":"page"},{"location":"contributing/#Code-Contribution","page":"Contribute","title":"Code Contribution","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you'd like to contribute code to the project:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Fork the repository.\nClone your fork: git clone https://github.com/gaelforget/MITgcm.jl\nCreate a new branch for your changes: git checkout -b feature-branch\nMake your changes and commit them with a clear message.\nPush your changes to your fork: git push origin feature-branch\nOpen a pull request against the master branch of the main repository.","category":"page"},{"location":"contributing/#Pull-Request-Process","page":"Contribute","title":"Pull Request Process","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Please ensure your pull request follows these guidelines:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Adheres to the coding standards.\nIncludes relevant tests for new functionality.\nHas a clear commit history and messages.\nReferences the relevant issue if applicable.","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Please don't hesistate to get in touch to discuss, or with any questions!","category":"page"},{"location":"contributing/#License","page":"Contribute","title":"License","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"By contributing to this project, you agree that your contributions will be licensed under the LICENSE file of this repository.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MITgcm","category":"page"},{"location":"examples/#Examples,-Notebooks","page":"Examples","title":"Examples, Notebooks","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"There are several ways to use MITgcm.jl to e.g. analyze model results or run a new model simulation. The notebooks presented here focus on running MITgcm mostly.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"tip: Tip\nCompiling MITgcm requires a fortran compiler. This is a requirement for all notebooks except MITgcm_configurations.jl.\nThe ECCO-Docker image has MITgcm.jl pre-installed, as well as gfortran, MPI, and NetCDF allowing to run any MITgcm configuration. The ECCO-Binder instance (free, but small) is available to try functionalities in the cloud.","category":"page"},{"location":"examples/#Notebooks-Listing","page":"Examples","title":"Notebooks Listing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The following notebooks demonstrate core features of MITgcm.jl, for running MITgcm and analyzing results.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"MITgcm_worklow.jl (code link): build, setup, run, and plot for a chosen standard MITgcm configuration.\nMITgcm_run.jl (code link) : a detailed look into compiling and running the model.\nMITgcm_configurations.jl (code link); explore MITgcm configurations and their parameters.\nMITgcm_scan_output.jl (code link) : scan run directory, standard output, read grid files, and vizualize. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The HS94* series of examples need to be run in sequence, as they rely on output from one another. This tutorial runs the Held and Suarez 94 benchmark\t with MITgcm on a cube sphere grid, and illustrates particle tracking in the Atmosphere using\tMeshArrays.jl and IndividualDisplacements.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"HS94_animation.jl (code link) : run hs94.cs-32x32x5 configuration, read output, interpolate, and plot maps.\nHS94_particles.jl (code link) : compute particle trajectories from hs94.cs-32x32x5 output generated earlier.\nHS94_Makie.jl (code link) : using Makie.jl instead of Plots.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nThe three examples in this series have to be run in sequence. HS94_animation.jl generates files that are then used in HS94_particles.jl, which generates output in turn used in HS94_Makie.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The following example uses the Darwin3 package that models marine microbes and microbial communities. See MIT's Darwin Project for more information about this effort.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Darwin3_1D.jl (code link) : one-dimensional examples.","category":"page"},{"location":"examples/#Standard-Modeling-Workflow","page":"Examples","title":"Standard Modeling Workflow","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here is the standard way to run a model configuration using MITgcm.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MITgcm\nMC=MITgcm_config(configuration=\"advect_xy\")\nrun(MC)\nMC.inputs","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"rundir=joinpath(MC,\"run\")\nsc=scan_rundir(rundir)\nsc.params_grid","category":"page"},{"location":"examples/#Pluto-Notebooks","page":"Examples","title":"Pluto Notebooks","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Below are links to static html versions of the examples which one can open with a web browser.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If instead you wanted to run the notebooks using Pluto.jl, then you might proceed as follows:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"open julia in terminal window\ntype the commands shown below at the Julia prompt\nin web-browser, open one of the notebooks' code link using the Pluto interface.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Pluto\nPluto.run(notebook=\"examples/MITgcm_configurations.jl\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Alternatively, you can run an example at the command line as, e.g., ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia -e 'using Pluto\nnotebook=\"examples/MITgcm_configurations.jl\"\nPluto.activate_notebook_environment(notebook)\nusing Pkg; Pkg.instantiate()\ninclude(notebook)\n'","category":"page"},{"location":"#MITgcm.jl","page":"Contents","title":"MITgcm.jl","text":"","category":"section"},{"location":"","page":"Contents","title":"Contents","text":"Julia interface to MITgcm which allows user to not only read and analyze model output, but also download the source code, build the model executable, set run-time parameters, run simulations, verify model results, and perform other tasks related to MITgcm. These functionalities are documented via the Examples, Notebooks section.","category":"page"},{"location":"#main-contents","page":"Contents","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Contents","title":"Contents","text":"Pages = [\n    \"functionalities.md\",\n    \"functionalities_interface.md\",\n    \"functionalities_configurations.md\",\n    \"functionalities_read.md\",\n    \"examples.md\",\n    \"contributing.md\",\n    \"API.md\",\n]\nDepth = 1","category":"page"},{"location":"#Features","page":"Contents","title":"Features","text":"","category":"section"},{"location":"","page":"Contents","title":"Contents","text":"Standard model run workflow (MITgcm-Julia interface)\nStandard MITgcm configurations (verification, ECCO)\nRead and write the various MITgcm file types\nExamples (docs, and notebooks in examples/)","category":"page"},{"location":"","page":"Contents","title":"Contents","text":"<img src=\"https://user-images.githubusercontent.com/20276764/111042787-12377e00-840d-11eb-8ddb-64cc1cfd57fd.png\" alt=\"Simulated particles from HS94 on cube sphere grid\" width=\"200\">\n<img src=\"https://user-images.githubusercontent.com/20276764/97648227-970b9780-1a2a-11eb-81c4-65ec2c87efc6.png\" alt=\"The impossible MITgcm rendering\" width=\"200\">","category":"page"},{"location":"API/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"}]
}
